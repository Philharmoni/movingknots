ld
x <- matrix(1:24, 4)
x
locate <- c(2, 1, 0, 1, 2)
locate <- c(2, 1, 0, 1, 2, 0)
sum(locate)
locate
id <- 1:6
id
rep(1:6, locate)
rep(1:6, locate)
q()
sourceDir("utils", T)
ls()
ls
ls
K
 a <- matrix(1, 10*100^2, 100^2)
 a <- matrix(1, 2*100^2, 100^2)
size(a)
print(object.size(a), units = "Mb")
rm(list = ls())
gc()
a <- matrix(1:10, 1)
a
a %x% diag(2)
a %x% diag(4)
a %x% diag(10)
ls()
siz
sourceDir("utils", T)
size(q)
size(a)
ls
dev.copy2pdf()
a <- matrix(0, 4, 6)
a
a[1:2, 1:3] <- 1:6
a
a[3:4, 4:6] <- 7:12
a
sourceDir("utils", T)
K
K(2, 2) %*% a
size
a <- matrix(1, 4, 4*100^2)
size(a)
b <- matrix(1, 4*100^2, 100^2)
size(b)
rm(b)
gc()
c <- matrix(1, 100^2, 100^2)
size(b)
size()
size(c)
c <- matrix(1, 100^2, 100*50)
size(c)
c <- matrix(1, 100^2, 100*10)
size(c)
ls()
class(ls())
rm(a)
rm(b)
rm(c)
rm(d)
a <- matrix(1, 4, 100*50)
a
size(a)
ls()
rm(a)
gc()
dim(K(2, 3))
all(Left == Right)
all(Left == Right)
all(Left == Right)
diag(q) %x% matrix(1:p) %x% diag(q)
Left
Left
Left
Left
Left
p
q
Left
Sigma
a <- matrix(1, 2*100, 100^2)
dim(a)
 size(a)
matrix(Left[, 1], 9)
matrix(Left[, 2], 9)
matrix(Left[, 3], 9)
matrix(Left[, 4], 9)
matrix(Left[, 5], 9)
matrix(Left[, 6], 9)
a <- matrix(1, 2*100, 2^2*100^2)
size(A)
size(a)
size(b)
size(a)
Left
Left
options(width=200)
Left
options(width=150)
Left
Left
p
q
a <- matrix(1:(p*q*p^2*q^2), p*q, p^2*q^2)
a
a %*% Left
a <- matrix(1, 10*100, 100^2)
size(a)
a <- matrix(1, 2*100, 100^2)
size(a)
dim(A)
dim(a)
Left
options(width=112)
Left
options(width=150)
Left
Left
Left
Left
Mat.x.DvecA.k.P_p1 <- function(Mat, A)

Left
p
q
Sigma
Left[, 1]
matrix(Left[, 1])
matrix(Left[, 1], 9)
matrix(Left[, 1], 6)
matrix(Left[, 1], 4)
matrix(Left[, 1], 5)
matrix(Left[, 1], 2)
Left
matrix(seq(1:36), p^2, q^2, byrow = TRUE)
matrix(seq(1:36), p^2, q, byrow = TRUE)
matrix(seq(1:p^2*q), p^2, q, byrow = TRUE)
matrix(seq(1:p^2*q), p^2, q, byrow = TRUE)
q
matrix(seq((1:p^2*q)), p^2, q, byrow = TRUE)
matrix(seq(1:(p^2*q)), p^2, q, byrow = TRUE)
matrix(seq(1:(p^2*q^2)), p^2, q^2, byrow = TRUE)
Left
mapply
??fold
???fold
????fold
????fold
apply
seq(1:24)
matrix(seq(1:24), 4, 6)
for
sourceDir("utils", T)
matrix(1:24, 6)
matrix(1:48, 12)
rep(seq(0, 6, 3), each = 6)
seq(0, by = 5, length.out = 10)
seq(0, by = 3, length.out = 4)
seq(0, by = 3, along.with=3)
seq(0, by = 3, along.with=2)
seq(0, by = 30, along.with=2)
seq(0, by = 1, along.with=2)
n
dim.x
idx0
nrow1
ncol1
idx1.tmp
idx1.tmp
idx2.tmp
idx2.tmp
    idx2.tmp <- matrix(rep(seq(0, by = nrow1 , length.out = nfolds), each =
                           dim.x[2]), nrow1, ncol1, byrow = TRUE)
    idx <- idx1.tmp + idx2.tmp
idx
out
Q
Mat
foldMat(Mat, 4, byrow = T)
dim(Mat)
)
)
dim(Mat)
ls()
size(Mat)
gc()
ls()
gc()
a <- matrix(1:24, 4, )
a
array(a)
array(a, c(4, 2, 3))
array(a, c(4, 2, 3))
b <- array(a, c(4, 2, 3))
c <- matrix(1:8, 2, 4)
c
apply(X = b, FUN = " %*% ", MARGIN = c(3))
apply(X = b, FUN = "%*%", MARGIN = c(3))
apply(X = b, FUN = "%*%", MARGIN = c(1, 2))
apply(X = b, FUN = "%*%", MARGIN = c(1, 2))
apply(X = b, FUN = "%*%", MARGIN = c(1, 2), c)
ls()
c
apply(X = b, FUN = "%*%", MARGIN = c(3), c)
b
apply(X = b, FUN = "%*%", MARGIN = c(1, 2), c)
b
c
c <- matrix(1:8, 4, 2)
c
apply(X = b, FUN = "%*%", MARGIN = c(1, 2), c)
b
c <- matrix(1:8, 2, 4)
c
apply(X = b, FUN = "%*%", MARGIN = c(1, 2), c)
apply(X = b, FUN = function(x, c) x %*% c, MARGIN = c(1, 2), c)
apply(X = b, FUN = function(x, c) x %*% c, MARGIN = c(1, 2), c)
apply(X = b, FUN = function(x, c) x %*% c, MARGIN = c(3), c)
b[, , 1]
b[, , 1] %*% c
b[, , 2] %*% c
b[, , 3] %*% c
apply(X = b, FUN = function(x, c) x %*% c, MARGIN = c(3), c)
foldMat
attr
a <- matrix(1, 1e5, 1e3)
dim(a)
system.time(array(a, c(100, 1000, 1000)))
system.time(array(a, c(100, 1000, 1000)))
system.time(array(a, c(100, 1000, 1000)))
system.time(array(a, c(100, 1000, 1000)))
system.time(array(a, c(100, 1000, 1000)))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
system.time(attr(a, "dim") <- c(100, 1000, 1000))
gc()
''
foldMat
Left
options(width=150)
Left
Mat.x.DvecA.k.P_p1
gc()
a
a <- array(1:24, c(2, 3, 4))
a
lista(a)
list(a)
ld
b <- list(a)
b[[1]]
b[[2]]
b
mat2list
mat2list
a = array(1:27, c(3,3,3))
a
unlist(lapply(apply(a,1,function(x) apply(x,1,list)),
  function(x) unlist(x, recursive = FALSE)), recursive = FALSE)

dim(A)
size(A)
K.X
system.time(t(A))
K.X
lapply(apply(matrix(diag.K, p), 2, list), unlist)
a
apply(a, 3, list)
b <- apply(a, 3, list)
class(b)
b[[ยง]]
b[[1]]
b[[[1]]]
b[[1]][1]
b[[1]][[1]]
a
apply(a, 3, list)
lapply[apply(a, 3, list), ulist]
lapply[apply(a, 3, list), unlist]
lapply(apply(a, 3, list), unlist)
a
lapply(apply(a, 3, list), unlist)
apply(a, 3, list)
mapply(a, 3, list)
sapply(a, 3, list)
vapply(a, 3, list)
apply(X = a, 3, list)
apply(X = a, 3, list, )
apply(X = a, 3, list, )
a = array(1:27, c(3,3,3))
a
unlist(lapply(apply(a,1,function(x) apply(x,1,list)),
  function(x) unlist(x, recursive = FALSE)), recursive = FALSE)

apply(a, 3, function(x) list(a[, 3]))
apply(a, 3, function(x) list(x[, 3]))
apply(a, 3, function(x) list(x[, 3]))
apply(a, 3, function(x) list(x))
apply(a, 3, function(x) unlist(list(x)))
apply(a, 3, function(x) list(x))
apply(a, 3, function(x) list(x))
lapply(apply(a, 3, function(x) list(x)), unlist)
lapply(apply(a, 3, function(x) list(x)), function(x) unlist(x))
lapply(apply(a, 3, function(x) list(x)), function(x) unlist(x, F))
lapply(apply(a, 3, function(x) list(x)), function(x) matrix(unlist(x), 2, 3))
lapply(apply(a, 3, function(x) list(x)), function(x) matrix(unlist(x), 2, 3))
lapply(apply(a, 3, function(x) list(x)), function(x) matrix(unlist(x), 2, 3))
a <- c(1, 2, 3)
a[-3]
a
a <- array(1:24, c(2, 3, 4))
array2list(a, )
a
array2list(a)
array2list(a, 2)
array2list(a, 3)
array2list(a, 1)
sourceDir("utils", T)
sourceDir("utils", T)
sourceDir("utils", T)
a
a <- matrix(1:24, 8)
a
arrayInd
array2list
array2list(a, 2)
a
dim(a)
array(1:10, c(1, 2))
a
array2list(a, 2)
dim(a)
array2list(a, 2)
array2list(a, 2)
array2list(a, 1)
a
a <- array(1:24, c(2, 3, 4))
a
a <- array(1:24, c(2, , 4))
a <- array(1:24, c(2, 4))
a
traceback()
traceback()
traceback()
n
ls()
dim(X)
MARGIN
dim4X
ls
ls()
dim4list
n
n
dim4X
dim4list
apply(X = a, MARGIN = MARGIN, list)
apply(a, MARGIN = MARGIN, list)
MARGIN
apply(a, MARGIN, list)
apply(a, 3, list)
dim(a)
Mat.array
Q
n
dim(Mat)
dim(Mat.array)
n
n
dim(Mat.array)
n
n
dim(X)
MARGIN
dim4list
apply(X = a, MARGIN = MARGIN, list)
Q
n
n
dim
dim(Mat.list)
length(Mat.list)
length(X_i.list)
length(delta_i.list)
Mat.list[[1]] %*% X_i.list[[1]]
X_i.list[[1]]
dim(X_i.list[[1]])
a <- tcrossprod(Mat.list[[1]],  X_i.list[[1]])
a <- tcrossprod(Mat.list[[1]],  X_i.list[[1]]) %*% delta_i.list[[1]]
a <- tcrossprod(Mat.list[[1]],  X_i.list[[1]]) %*% delta_i.list[[1]]
dim(a)
dim(delta_i.list[[1]])
Q
sourceDir("utils", T)
Q
n
dim(delta_i.list)
dim(delta_i.list[[1]])
dim(delta_i.list[[2]])
dim(delta_i.array)
ls
ls()
sourceDir("utils", T)
sourceDir("utils", T)
ls
ls()
sourceDir("utils", T)
ls()
fucs
whos
whos
size(Mat)
size(X_i)
size(delta_i)
dim(delta_i)
gc()
n
dim(delta_i.array)
system.time(array2list(delta_i.array, 3))
system.time(array2list(delta_i.array, 3))
system.time(array2list(delta_i.array, 3))
n
system.time(Mat %*% delta_i)
system.time(Mat %*% delta_i)
system.time(Mat %*% delta_i)
system.time(Mat %*% delta_i)
system.time(Mat %*% delta_i)
system.time(Mat %*% delta_i)
system.time(Mat %*% delta_i)
Q
n
dim(X_i)
system.time(tcrossprod(X_i, delta_i[, , 1]))
system.time(tcrossprod(X_i, delta_i[, , 1]))
dim(delta_i)
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
size(delta_i)
dim(delta_i)
system.time(tcrossprod(X_i, delta_i))
dim(X_i)
dim(delta_i)
system.time(tcrossprod(X_i, delta_i))
system.time(tcrossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
system.time(crossprod(X_i, delta_i))
dim(delta_i)
n
sourceDir("utils", T)
sourceDir("utils", T)
size(B)
size()
size(A)
system.time(A %*% B)
30/100
library("Matrix")
library("Matrix")
n
n
sourceDir("utils", T)
n
sourceDir("utils", T)
n
length(delta4X.list)
length(delta4X.list)
library("Matrix")
a <- bdiag(delta4X.list)
class(a)
system.time(Mat %*% a)
Q
library("Matrix")
n
a <- bdiag(delta4X.list)
system.time(Mat %*% a)
Q
a <- bdiag(matrix(1:4, 2), matrix(5, 8, 2))
a
a <- bdiag(list(matrix(1:4, 2), matrix(5, 8, 2)))
a
a <- bdiag(list(matrix(1:4, 2), matrix(5:8, 2)))
a
b <- matrix(1:16, 4)
b %*% a
c <- b %*% a
class(c)
sourceDir("utils", T)
n
n
length(Mat.list)
length(delta4X.list)
dim(delta4X.list[[1]])
dim(Mat.list[[1]])
dim(Mat[[1]])
dim(Mat)
p
q
dim(Mat.array)
dim(Mat.list[[1]])
dim(delta4X)
Q
n
gc()
ls()
gc()
n
out.tmp
dim(out.tmp)
n
print(n)
p
q
Mat.list[[1]] %*% delta4X.list[[1]]
a <- Mat.list[[1]] %*% delta4X.list[[1]]
all.equal(a, out.tmp[, 1])
all.equal(as.vector(a), as.vector(out.tmp[, 1]))
version
.First.sys
a <- 5
attr(a, "type") <- "AA"
a
is(a, "AA")
a
a$type
attr(a, "type")
a <- rnorm(10)
kmeans(a, 2)
a <- matrix(1:100, 20)
a
kmeans(a[, 1], centers = 1)$centers
a <- kmeans(a[, 1], centers = 1)$centers
class(a)
a <- kmeans(a[, 2], centers = 1)$centers
a <- kmeans(a[, 2], centers = 1)$centers
a <- matrix(1:100, 20)
kmeans(a[, 1], centers = 1)$centers
kmeans(a[, 2], centers = 1)$centers
kmeans(a[, 1], centers = 1)$centers
kmeans(a[, 1], centers = 2)$centers
kmeans(a[, 1], centers = 20)$centers
kmeans(a[, 1, drop = FALSE], centers = 20)$centers
kmeans(a, centers = 20)$centers
kmeans
kmeans(a, centers = 20)$centers
a <- matrix(1:100, 20)
a
kmeans(a, 20)
a <- matrix(1:100, 20)
kmeans(a, 20)
a
kmeans(a, 4)
kmeans(a, 5)
a
a
a
a
a
unlist(A)
dim(A)
rm(A)
ls
ls()
unlist(a)
a
t(a)
a <- t(a)
a
a[1]
a[2]
a
a
a <- NA
class(a)
a <- list("a" = 5, "b" = 3)
a
a <- c(1:5)
a
a[c(2, NA, 3)]
a[c(2, NULL, 3)]
array
ls()
rm(list = ls())
ls()
install.packages("mvtnorm")
traceback()
getwd()
ls()
ls()
objects()
str()
str(ls())
str(X
)
ls.str()
lsf.str()
INIT.knots
INIT.knots
splineArgs
rep(1:m, splineArgs$thinplate.a.locate)
rep(1:m, splineArgs$thinplate.a.locate)
m
rep(1:m, splineArgs$thinplate.a.locate)
splineArgs
p
q
lm.init
summary(lm.init)
rm(list = ls())
rm(list = ls())
rm
rm(list = ls())
rm
rm(list = ls())
knots.mu0
k
x
length.mu0
length(knots.mu0)
splineArgs
a <- matrix(1:24, 6)
a
diag(4) %x% crossprod(a)
require("Matrix")
bdiag
example(bdiag)
a <- 
 bdiag(mlist)
a
b <- matrix(1:13^2, 13)
b
c = b %*% a
c
class(c)
dim(c)
class(c)
is.matrix(c)
is.Matrix(c)
a <- matrix(1:24, 6)
a
b <- a[c(1, 2, 2, 3, 0, 4)]
b
b <- a[, c(1, 2, 2, 3, 0, 4)]
b
solve(crossprod(b))
a
TRUE
a
b <- crossprod(a)
b
solve(b)
a <- rnorm(24, 6)
a
a <- matrix(rnorm(24), 6)
a
b <- a[, c(1, 1, 2, 3, 4)]
b
c <- crossprod(b)
c
solve(c)
knots.init
bdiag <- function(x){
     if(!is.list(x)) stop("x not a list")
     n <- length(x)
     if(n==0) return(NULL)
     x <- lapply(x, function(y) if(length(y)) as.matrix(y) else
stop("Zero-length component in x"))
     d <- array(unlist(lapply(x, dim)), c(2, n))
     rr <- d[1,]
     cc <- d[2,]
     rsum <- sum(rr)
     csum <- sum(cc)
     out <- array(0, c(rsum, csum))
     ind <- array(0, c(4, n))
     rcum <- cumsum(rr)
     ccum <- cumsum(cc)
     ind[1,-1] <- rcum[-n]
     ind[2,] <- rcum
     ind[3,-1] <- ccum[-n]
     ind[4,] <- ccum
     imat <- array(1:(rsum * csum), c(rsum, csum))
     iuse <- apply(ind, 2, function(y, imat) imat[(y[1]+1):y[2],
(y[3]+1):y[4]], imat=imat)
     iuse <- as.vector(unlist(iuse))
     out[iuse] <- unlist(x)
     return(out)
} 
mats <- list(matrix(1:20, 5, 4), matrix(1:12, 4, 3), matrix(1:25, 5,
5))
bdiag(mats) 
ls()
bdiag
bdiag(3)
bdiag(list(3))
bdiag(list(3, matrix(1:2)))
a <- ...
cc <- function(..) return(...)
cc(2)
cc <- function(..) b <- ...
cc(2)
cc <- function(..) b <- ...
a = list(2)
class(a)
a <- list(list(2))
a
unlist(a)
unlist(a, recursive = F)
block.diag(2)
block.diag(5)
block.diag(5, 3, 4)
block.diag(c(2, 3, 4), 4)
block.diag(c(2, 3, 4))
block.diag(c(2, 3, 4))
block.diag(c(2, 3, 4))
block.diag(c(2, 3, 4), 4)
block.diag(list(c(2, 3, 4), 4))
block.diag(list(c(2, 3, 4)))
block.diag(c(2, 3, 4))
a <- list(list(2))
a
class(a)
class(a[1])
class(a[[1]])
class(a[[1]])
